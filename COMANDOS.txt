
#    ______        _   ______   _____     _____   _____    _____   _____    ____      __ 
#   |  ____|      | | |  ____| |  __ \   / ____| |_   _|  / ____| |_   _|  / __ \    /_ |
#   | |__         | | | |__    | |__) | | |        | |   | |        | |   | |  | |    | |
#   |  __|    _   | | |  __|   |  _  /  | |        | |   | |        | |   | |  | |    | |
#   | |____  | |__| | | |____  | | \ \  | |____   _| |_  | |____   _| |_  | |__| |    | |
#   |______|  \____/  |______| |_|  \_\  \_____| |_____|  \_____| |_____|  \____/     |_|
#                                                                                        
#                                                                                        


                                                                 
# Configurar nombre de usuario
git config --global user.name "Tu Nombre"

# Configurar correo electrónico
git config --global user.email "tu@email.com"

# Activar coloreado de salida
git config --global color.ui auto

# Mostrar configuración final
git config --list

# Crear un nuevo repositorio
git init libro

# Entrar al directorio del repositorio
cd libro

# Mostrar contenido del repositorio
ls

# Comprobar estado del repositorio
git status

# Crear el fichero indice.txt y añadir contenido
echo "Capítulo 1: Introducción a Git" > indice.txt
echo "Capítulo 2: Flujo de trabajo básico" >> indice.txt
echo "Capítulo 3: Repositorios remotos" >> indice.txt

# Comprobar estado del repositorio después de crear el fichero
git status

# Añadir el fichero a la zona de intercambio temporal
git add indice.txt

# Comprobar estado del repositorio después de añadir el fichero
git status

# Realizar un commit con el mensaje especificado
git commit -m "Añadido índice del libro"

# Ver estado del repositorio después del commit
git status

# Modificar el contenido del fichero indice.txt
echo "Capítulo 1: Introducción a Git" > indice.txt
echo "Capítulo 2: Flujo de trabajo básico" >> indice.txt
echo "Capítulo 3: Gestión de ramas" >> indice.txt
echo "Capítulo 4: Repositorios remotos" >> indice.txt

# Mostrar los cambios
git diff

# Hacer un commit con el mensaje especificado
git commit -m "Añadido capítulo 3 sobre gestión de ramas"

# Ver estado del repositorio después del commit
git status

# Mostrar los cambios de la última versión con respecto a la anterior
git log -p -1

# Cambiar el mensaje del último commit
git commit --amend -m "Añadido capítulo 3 sobre gestión de ramas al índice."

# Volver a mostrar los últimos cambios del repositorio
git log -p -1


#    ______        _   ______   _____     _____   _____    _____   _____    ____      ___  
#   |  ____|      | | |  ____| |  __ \   / ____| |_   _|  / ____| |_   _|  / __ \    |__ \ 
#   | |__         | | | |__    | |__) | | |        | |   | |        | |   | |  | |      ) |
#   |  __|    _   | | |  __|   |  _  /  | |        | |   | |        | |   | |  | |     / / 
#   | |____  | |__| | | |____  | | \ \  | |____   _| |_  | |____   _| |_  | |__| |    / /_ 
#   |______|  \____/  |______| |_|  \_\  \_____| |_____|  \_____| |_____|  \____/    |____|
#                                                                                          
#                                                                                          

                                                                   


# Mostrar el historial de cambios del repositorio
git log

# Crear la carpeta capitulos y el fichero capitulo1.txt
mkdir capitulos
echo "Git es un sistema de control de versiones ideado por Linus Torvalds." > capitulos/capitulo1.txt

# Añadir los cambios a la zona de intercambio temporal
git add capitulos/capitulo1.txt

# Hacer un commit de los cambios con el mensaje “Añadido capítulo 1.”
git commit -m "Añadido capítulo 1."

# Mostrar el historial de cambios del repositorio
git log

# Crear el fichero capitulo2.txt en la carpeta capitulos
echo "El flujo de trabajo básico con Git consiste en:" > capitulos/capitulo2.txt
echo "1- Hacer cambios en el repositorio." >> capitulos/capitulo2.txt
echo "2- Añadir los cambios a la zona de intercambio temporal." >> capitulos/capitulo2.txt
echo "3- Hacer un commit de los cambios." >> capitulos/capitulo2.txt

# Añadir los cambios a la zona de intercambio temporal
git add capitulos/capitulo2.txt

# Hacer un commit de los cambios con el mensaje “Añadido capítulo 2.”
git commit -m "Añadido capítulo 2."

# Mostrar las diferencias entre la última versión y dos versiones anteriores
git diff HEAD~2 HEAD

# Crear el fichero capitulo3.txt en la carpeta capitulos
echo "Git permite la creación de ramas lo que permite tener distintas versiones del mismo proyecto y trabajar de manera simultanea en ellas." > capitulos/capitulo3.txt

# Añadir los cambios a la zona de intercambio temporal
git add capitulos/capitulo3.txt

# Hacer un commit de los cambios con el mensaje “Añadido capítulo 3.”
git commit -m "Añadido capítulo 3."

# Mostrar las diferencias entre la primera y la última versión del repositorio
git diff HEAD~2 HEAD

# Añadir al final del fichero indice.txt la línea: Capítulo 5: Conceptos avanzados
echo "Capítulo 5: Conceptos avanzados" >> indice.txt

# Añadir los cambios a la zona de intercambio temporal
git add indice.txt

# Hacer un commit de los cambios con el mensaje “Añadido capítulo 5 al índice.”
git commit -m "Añadido capítulo 5 al índice."

# Mostrar quién ha hecho cambios sobre el fichero indice.txt
git blame indice.txt

#Subir todo a GitHub
git remote add https://github.com/iRoot13x18/Libro
git push 


#    ______        _   ______   _____     _____   _____    _____   _____    ____      ____  
#   |  ____|      | | |  ____| |  __ \   / ____| |_   _|  / ____| |_   _|  / __ \    |___ \ 
#   | |__         | | | |__    | |__) | | |        | |   | |        | |   | |  | |     __) |
#   |  __|    _   | | |  __|   |  _  /  | |        | |   | |        | |   | |  | |    |__ < 
#   | |____  | |__| | | |____  | | \ \  | |____   _| |_  | |____   _| |_  | |__| |    ___) |
#   |______|  \____/  |______| |_|  \_\  \_____| |_____|  \_____| |_____|  \____/    |____/ 
#                                                                                           
#                                                                                           


                                                                                                                                    
# Crear una nueva rama llamada "bibliografia"
git branch bibliografia

# Mostrar las ramas del repositorio
git branch

# Crear el fichero capitulos/capitulo4.txt y añadir el texto
echo "Contenido del capítulo 4." > capitulos/capitulo4.txt

# Añadir los cambios a la zona de intercambio temporal
git add capitulos/capitulo4.txt

# Hacer un commit con el mensaje "Añadido capítulo 4."
git commit -m "Añadido capítulo 4."

# Mostrar la historia del repositorio incluyendo todas las ramas
git log --all --graph --oneline

# Cambiar a la rama "bibliografia"
git checkout bibliografia

# Crear el fichero bibliografia.txt y añadir la referencia
echo "Chacon, S. and Straub, B. Pro Git. Apress." > bibliografia.txt

# Añadir los cambios a la zona de intercambio temporal
git add bibliografia.txt

# Hacer un commit con el mensaje "Añadida primera referencia bibliográfica."
git commit -m "Añadida primera referencia bibliográfica."

# Mostrar la historia del repositorio incluyendo todas las ramas
git log --all --graph --oneline

# Cambiar a la rama "master"
git checkout master

# Fusionar la rama "bibliografia" con la rama "master"
git merge bibliografia

# Mostrar la historia del repositorio incluyendo todas las ramas
git log --all --graph --oneline

# Eliminar la rama "bibliografia"
git branch -d bibliografia

# Mostrar de nuevo la historia del repositorio incluyendo todas las ramas
git log --all --graph --oneline

# Crear y cambiar a la rama "bibliografia"
git branch bibliografia
git checkout bibliografia

# Cambiar el fichero bibliografia.txt con nuevas referencias
echo "Scott Chacon and Ben Straub. Pro Git. Apress." > bibliografia.txt
echo "Ryan Hodson. Ry’s Git Tutorial. Smashwords (2014)" >> bibliografia.txt

# Añadir los cambios a la zona de intercambio temporal y hacer un commit
git add bibliografia.txt
git commit -m "Añadida nueva referencia bibliográfica."

# Cambiar a la rama "master"
git checkout master

# Cambiar el fichero bibliografia.txt con otras referencias
echo "Chacon, S. and Straub, B. Pro Git. Apress." > bibliografia.txt
echo "Loeliger, J. and McCullough, M. Version control with Git. O’Reilly." >> bibliografia.txt

# Añadir los cambios a la zona de intercambio temporal y hacer un commit
git add bibliografia.txt
git commit -m "Añadida nueva referencia bibliográfica."

# Fusionar la rama "bibliografia" con la rama "master" (puede causar conflicto)
git merge bibliografia

# Resolver el conflicto dejando el fichero bibliografia.txt con las referencias correctas
# Después, añadir los cambios a la zona de intercambio temporal y hacer un commit
git add bibliografia.txt
git commit -m "Resuelto conflicto de bibliografía."

# Mostrar la historia del repositorio incluyendo todas las ramas
git log --all --graph --oneline

#    ______        _   ______   _____     _____   _____    _____   _____    ____      _____ 
#   |  ____|      | | |  ____| |  __ \   / ____| |_   _|  / ____| |_   _|  / __ \    | ____|
#   | |__         | | | |__    | |__) | | |        | |   | |        | |   | |  | |   | |__  
#   |  __|    _   | | |  __|   |  _  /  | |        | |   | |        | |   | |  | |   |___ \ 
#   | |____  | |__| | | |____  | | \ \  | |____   _| |_  | |____   _| |_  | |__| |    ___) |
#   |______|  \____/  |______| |_|  \_\  \_____| |_____|  \_____| |_____|  \____/    |____/ 
#                                                                                           
#            

# Eliminar la última línea del fichero indice.txt y guardarlo.
sed -i '$ d' indice.txt

# Comprobar el estado del repositorio.
git status

# Deshacer los cambios realizados en el fichero indice.txt para volver a la versión anterior del fichero.
git checkout -- indice.txt

# Volver a comprobar el estado del repositorio.
git status

# Eliminar la última línea del fichero indice.txt y guardarlo.
sed -i '$ d' indice.txt

# Añadir los cambios a la zona de intercambio temporal.
git add indice.txt

# Comprobar de nuevo el estado del repositorio.
git status

# Quitar los cambios de la zona de intercambio temporal, pero mantenerlos en el directorio de trabajo.
git reset HEAD indice.txt

# Comprobar de nuevo el estado del repositorio.
git status

# Deshacer los cambios realizados en el fichero indice.txt para volver a la versión anterior del fichero.
git checkout -- indice.txt

# Volver a comprobar el estado del repositorio.
git status

                                                                               
# Eliminar la última línea del fichero indice.txt y guardarlo.
sed -i '$ d' indice.txt

# Eliminar el fichero capitulos/capitulo3.txt.
rm capitulos/capitulo3.txt

# Añadir un fichero nuevo capitulos/capitulo4.txt vacío.
touch capitulos/capitulo4.txt

# Añadir los cambios a la zona de intercambio temporal.
git add indice.txt capitulos/capitulo3.txt capitulos/capitulo4.txt

# Comprobar de nuevo el estado del repositorio.
git status

# Quitar los cambios de la zona de intercambio temporal, pero mantenerlos en el directorio de trabajo.
git reset HEAD indice.txt capitulos/capitulo3.txt capitulos/capitulo4.txt

# Comprobar de nuevo el estado del repositorio.
git status

# Deshacer los cambios realizados para volver a la versión del repositorio.
git checkout -- indice.txt capitulos/capitulo3.txt capitulos/capitulo4.txt

# Volver a comprobar el estado del repositorio.
git status

# Eliminar la última línea del fichero indice.txt y guardarlo.
sed -i '$ d' indice.txt

# Eliminar el fichero capitulos/capitulo3.txt.
rm capitulos/capitulo3.txt

# Añadir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje "Borrado accidental."
git add indice.txt capitulos/capitulo3.txt
git commit -m "Borrado accidental."

# Comprobar el historial del repositorio.
git log

# Deshacer el último commit pero mantener los cambios anteriores en el directorio de trabajo y la zona de intercambio temporal.
git reset --soft HEAD^

# Comprobar el historial y el estado del repositorio.
git log
git status

# Volver a hacer el commit con el mismo mensaje de antes.
git commit -m "Borrado accidental."

# Deshacer el último commit y los cambios anteriores del directorio de trabajo volviendo a la versión anterior del repositorio.
git reset --hard HEAD^

# Comprobar de nuevo el historial y el estado del repositorio.
git log
git status










